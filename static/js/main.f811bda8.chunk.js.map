{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QuoteText","props","state","randomQuote","author","handleClick","bind","$","getJSON","data","append","quoteText","quoteAuthor","on","window","open","text","empty","id","className","type","onClick","this","href","class","React","Component","ReactDOM","render","document","getElementById","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sUAMMA,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAa,OACbC,OAAQ,UAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,iFASjBC,IAAEC,QACA,oFACA,SAASC,GACPF,IAAE,SAASG,OAAO,WAAaD,EAAKE,UAAY,aAChDJ,IAAE,WAAWG,OAAO,QAAUD,EAAKG,YAAc,gBAGrDL,IAAE,gBAAgBM,GAAG,SAAS,WAC5BC,OAAOC,KAAK,0CAAkDR,IAAE,SAASS,OAAS,OAAeT,IAAE,WAAWS,OAAQ,e,oCAKxHT,IAAEC,QACA,oFACA,SAASC,GACPF,IAAE,SAASU,QACXV,IAAE,SAASG,OAAO,eAAiBD,EAAKE,UAAY,iBACpDJ,IAAE,WAAWU,QACbV,IAAE,WAAWG,OACX,eAAiBD,EAAKG,YAAc,sB,+BAO1C,OACE,6BACE,wBAAIM,GAAG,SAAP,wBACA,yBAAKA,GAAG,WACN,yBAAKA,GAAG,SACR,yBAAKA,GAAG,YAEV,uBAAGC,UAAU,WACX,4BACEC,KAAK,SACLD,UAAU,kBACVD,GAAG,YACHG,QAASC,KAAKjB,aAJhB,aAQA,uBAAGkB,KAAK,IAAIL,GAAG,eACf,4BAAQC,UAAU,mBAAlB,gBAAiD,uBAAGK,MAAM,oBAE1D,uBAAGD,KAAK,sBAAsBL,GAAG,QACjC,4BAAQC,UAAU,mBAAlB,2B,GAzDYM,IAAMC,WAiE9BC,IAASC,OACP,kBAAC,EAAD,MAAeC,SAASC,eAAe,SAG1B9B,IC/DT+B,EAAcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3C,QACfqC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,OA1E1D,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,wBAAwB1C,OAAOmB,SAASV,MACpDkC,SAAW3C,OAAOmB,SAASwB,OAIvC,OAGF3C,OAAO4C,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,wBAAN,sBAEPzB,IAgEV,SAAiCM,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5BlB,MAAK,SAAAmB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7B5B,OAAOmB,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAmB,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.f811bda8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport $ from 'jquery';\n\n\nclass QuoteText extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        randomQuote: \"Text\",\n        author: \"Author\"\n      };\n      this.handleClick = this.handleClick.bind(this);\n    }\n    componentDidMount() {\n      $.getJSON(\n        \"https://api.forismatic.com/api/1.0/?method=getQuote&format=jsonp&lang=en&jsonp=?\",\n        function(data) {\n          $(\"#text\").append(\"</br><p>\" + data.quoteText + \"</p></br>\");\n          $(\"#author\").append(\"<p>- \" + data.quoteAuthor + \"</p></br>\");\n        }\n      );\n      $(\"#tweet-quote\").on(\"click\", function() {\n        window.open(\"https://twitter.com/intent/tweet?text=\" + \"\\\"\" + $(\"#text\").text() + \"\\\"\" + \" - \" + $(\"#author\").text(), '_blank');\n      });\n    }\n\n    handleClick() {\n      $.getJSON(\n        \"https://api.forismatic.com/api/1.0/?method=getQuote&format=jsonp&lang=en&jsonp=?\",\n        function(data) {\n          $(\"#text\").empty();\n          $(\"#text\").append(\"<blockquote>\" + data.quoteText + \"</blockquote>\");\n          $(\"#author\").empty();\n          $(\"#author\").append(\n            \"<blockquote>\" + data.quoteAuthor + \"</blockquote>\"\n          );\n        }\n      );\n    }\n\n    render() {\n      return (\n        <div>\n          <h1 id=\"title\">Random-Quote-Machine</h1>\n          <div id=\"content\">\n            <div id=\"text\" />\n            <div id=\"author\" />\n          </div>\n          <p className=\"buttons\">\n            <button\n              type=\"button\"\n              className=\"btn btn-success\"\n              id=\"new-quote\"\n              onClick={this.handleClick}\n            >\n              New Quote\n            </button>\n            <a href=\"#\" id=\"tweet-quote\">\n            <button className=\"btn btn-success\">Tweet Quote  <i class=\"fa fa-twitter\"/></button>\n            </a>\n            <a href=\"http://ahaf-dev.com\" id=\"ahaf\">\n            <button className=\"btn btn-success\">Back to ahaf-dev</button>\n            </a>\n          </p>\n        </div>\n      );\n    }\n  }\n\nReactDOM.render(\n  <QuoteText />, document.getElementById(\"root\")\n);\n\nexport default QuoteText;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $ from 'jquery';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}